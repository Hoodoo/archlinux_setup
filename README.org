* Запах свежей инсталляции по утрам

https://grahamc.com/blog/erase-your-darlings

Файл расчитан на ThinkPad T480.

По идее, достаточно где-то опубликовать этот файл, в инсталлере запускать ~tmux~ и ~emacs~ и накатывать по инструкции. ~tmux~ умеет копировать и вставлять строки, причём по дефолту работает с хоткеями из ~emacs~. Единственные вещи, которые нужно будет запомнить:

#+begin_src sh
iwctl
station wlan0 scan
station wlan0 connect SSID
#+end_src

Начну с полуручных операций, автоматизация по необходимости.

** Мусорка

   #+begin_src sh
   mkdir prep
   mkdir mn
   cd prep
   pacman -S git
   git clone git@github.com:Hoodoo/archlinux_setup.git
   cd archlinux_setup
   emacs README.org
   #+end_src

** Партиции 1

   https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system#LVM_on_LUKS

   #+begin_quote
   The straightforward method is to set up LVM on top of the encrypted partition instead of the other way round. Technically the LVM is setup inside one big encrypted blockdevice. Hence, the LVM is not transparent until the blockdevice is unlocked and the underlying volume structure is scanned and mounted during boot.

   The disk layout in this example is:
   #+end_quote

   #+begin_example
+-----------------------------------------------------------------------+ +----------------+
| Logical volume 1      | Logical volume 2      | Logical volume 3      | | Boot partition |
|                       |                       |                       | |                |
| [SWAP]                | /                     | /home                 | | /boot          |
|                       |                       |                       | |                |
| /dev/MyVolGroup/swap  | /dev/MyVolGroup/root  | /dev/MyVolGroup/home  | |                |
|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _| | (may be on     |
|                                                                       | | other device)  |
|                         LUKS2 encrypted partition                     | |                |
|                           /dev/sda1                                   | | /dev/sdb1      |
+-----------------------------------------------------------------------+ +----------------+
  #+end_example

  Соответственно, нужно две партиции, одна под ~/boot~ и одна под ~LUKS~ со всем остальным.

luks  Переводим в ~GPT~, создаём партиции (секторы взяты, так сказать, эмпирически)

  ~ef00~ это ~efi~ партиция.

  Для второй партиции end sector 0 означает "последний какой только можно"

   #+begin_src
   sgdisk -g /dev/nvme0n1
   sgdisk -n 1:2048:555007 -t 1:ef00 /dev/nvme0n1
   sgdisk -n 2:555008:0 -t 2:8300 /dev/nvme0n1
   #+end_src

** LUKS

   Как и было сказано, используем ~LVM~ on ~LUKS~, партиции созданы, теперь сетапим шифрованный раздел. Есть ограничение: стандартный ~ecrypt~ хук не позволит создать группу томов на нескольких устройствах, но это не используется на ноутбуке.

   #+begin_src
   cryptsetup luksFormat /dev/nvme0n1p2
   cryptsetup open /dev/nvme0n1p2 cryptlvm
   #+end_src

** Партиции 2

   На зашифрованной партиции создадим логические тома под корень, домашнюю директорию и своп.

   #+begin_src
   pvcreate /dev/mapper/cryptlvm
   vgcreate arch /dev/mapper/cryptlvm
   lvcreate -L 32G arch -n swap
   lvcreate -L 32G arch -n root
   lvcreate -l 100%FREE arch -n home
   #+end_src

   Форматируем

   #+begin_src
   mkfs.ext4 /dev/arch/root
   mkfs.ext4 /dev/arch/home
   mkswap /dev/arch/swap
   #+end_src

   И форматируем /boot

   #+begin_src
   mkfs.fat -F32 /dev/nvme0n1p1
   #+end_src

** Монтируем корень
   
   #+begin_src 
   mount /dev/arch/root /mnt
   mkdir /mnt/boot
   mkdir /mnt/home
   mount /dev/nvme0n1p1 /mnt/boot
   mount /dev/arch/home /mnt/home
   #+end_src
   
** Зеркала и packstrap

   Просто удаляем всё, что перед зеркалом яндекса в /etc/pacman.d/mirrorlist

   Некоторые игры с GOG требуют 32-битные библиотеки, подключим multilib (раскомментировать в ~/etc/pacman.conf~)

   #+begin_src
   pacman -Syy
   #+end_src

   Установим сразу всё, что можно установить не из ~AUR~: в любом случае нужно будет перед чрутом установить несколько пакетов для поддержки ~LUKS~ и ~LVM~.

   #+begin_src sh
   pacstrap /mnt base linux linux-firmware man-db man-pages texinfo grub efibootmgr dhclient bluez modemmanager sudo networkmanager mesa xf86-video-intel xorg-server xorg-xinit xf86-input-libinput openconnect git lvm2 cryptsetup sudo emacs rofi rofi-pass maim wget dnsutils qtpass community/the_silver_searcher python python-pip udisks2 udiskie firefox ttf-dejavu ttf-liberation
   #+end_src

** Перед ~chroot~

   #+begin_src 
   genfstab -U /mnt >> /mnt/etc/fstab
   cat /mnt/etc/fstab
   #+end_src

** ~chroot~
   
   #+begin_src 
   cp -r ../archlinux_setup /mnt/root/
   arch-chroot /mnt
   #+end_src

   #+begin_src
   ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
   hwclock --systohc
   #+end_src

   #+begin_src 
   cp configs/locale.gen /etc/locale.gen
   locale-gen
   cp configs/locale.conf /etc/locale.conf
   cp configs/hostname /etc/hostname
   cp configs/70-synaptics.conf /etc/X11/xorg.conf.d/
   #+end_src

** initramfs

   Добавить хуки

   #+begin_src 
   HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems keyboard resume fsck) 
   #+end_src

   #+begin_src 
   mkinticpio -P
   #+end_src
   
** root

   #+begin_src 
   passwd
   #+end_src

** grub

   На этой машине при каждой переналивке будут создаваться логические тома с одинаковыми названиями, ~UUID~ криптоконтейнера может измениться.

   #+begin_src sh
   UUID=`blkid /dev/nvme0n1p2 | grep -ow 'UUID="[a-f0-9\-]*"' | sed 's?"??g'`
   LINUM=`grep -n GRUB_CMDLINE_LINUX= /etc/default/grub | cut -d ":" -f 1`
   HEAD=`head -$((${LINUM} - 1)) /etc/default/grub`
   LENGTH=`wc -l /etc/default/grub | awk '{ print $1 }'`
   TAIL=`tail -$((${LENGTH} - ${LINUM})) /etc/default/grub`
   CMDLINE='GRUB_CMDLINE_LINUX="resume=/dev/arch/swap cryptdevice='
   CMDLINE+=${UUID}
   CMDLINE+=':crytplvm root=/dev/arch/root"'
   echo "${HEAD}" > grub
   echo "${CMDLINE}" >> grub
   echo "${TAIL}" >> grub
   #+end_src

 mv grub /etc/default

grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

** crypttab

   #+begin_src sh
   UUID=`blkid /dev/nvme0n1p2 | grep -ow 'UUID="[a-f0-9\-]*"' | sed 's?"??g'`; echo "cryptlvm ${UUID}" > /etc/crypttab
   #+end_src

** юзер

   #+begin_src 
   useradd -m -G wheel -s /bin/bash hoodoo
   cp configs/sudoers /etc/
	passwd hoodoo
   #+end_src

** ~AUR~
   
   Немного экзотики из ~AUR~

   #+begin_src shell
   sudo pacman -S --needed base-devel
   mkdir /home/hoodoo/pkgbuild
   git clone https://aur.archlinux.org/yay.git
   cd yay
   makepkg -si
   cd /root/archlinux_setup
   yay -S rofi-greenclip termite ttf-iosevka deadd-notification-center-bin picom nitrogen mons activitywatch-bin slack-desktop
  #+end_src

** pip, gem и т.п.

   #+begin_src 
   pip install notify-send.py
   #+end_src

** github

   #+begin_src 
   mkdir github
   cd github
   git clone https://github.com/gsstark/yubiswitch-for-linux.git
   cd yubiswitch-for-linux
   gcc -g -Wall -o yubiswitch main.c
   sudo install -o root  -g root -m 4755  yubiswitch /usr/local/bin/
   
   cd ..

   git clone https://github.com/adi1090x/termite-style.git
   #+end_src

** WM и прочие части окружения

exit


   #+begin_src 
   cp -r configs/openbox /home/hoodoo/.config/
   mkdir -p /home/hoodoo/.local/bin
   cp configs/kbswitch.sh /home/hoodoo/.local/bin
   cp configs/.bashrc /home/hoodoo
   mkdir -p /home/hoodoo/.config/{termite,sxhkd}
   cp configs/sxhkdrc /home/hoodoo/.config/sxhkd/
   cp configs/termite_slash_config /home/termite/config
   mkdir /home/hoodoo/.emacs.d/
   cp configs/init.el /home/hoodoo/.emacs.d/

for F in `find /home/hoodoo/.config/`; do chown hoodoo ${F}; done
chown -R hoodoo /home/hoodoo/.emacs.d/

   #+end_src

   Обоина: https://pixabay.com/users/barbaraalane-756613/
   Лицензия на обоину: https://pixabay.com/service/license/

** Сервисы

   #+begin_src 
   sudo systemctl enable NetworkManager
   sudo systemctl enable pcscd
   #+end_src

** Первый логин

   Перед первым логином нужно, чтобы емакс забутстрапил все пакеты, соответственно

   #+begin_src 
   emacs
   #+end_src

   После этого можно стартовать иксы

   #+begin_src 
   startx
   #+end_src

** Секреты

   - passwordstore
   - ssh
   - gnupg
   - ssh-add -s  /usr/lib/opensc-pkcs11.so 

** Бэкапы на отдельные диски на работе и дома

   Поскольку график сейчас не очень стабильный, наверное, нельзя расчитывать на автомонтирование устройств для бэкапа.

   'Домашний' том:
   /run/media/hoodoo/58b8a66d-a305-456a-9a26-ab9bfef6d95b

   'Рабочий' том:
   /run/media/hoodoo/e542ac74-2ecf-45d7-97bd-99e0fb5f6182

   #+begin_src 
   sudo cp configs/rsnapshot* /etc/
   #+end_src

** Оповещения

TODO 
- .xinitrc
- разобраться с yay, убрать наверное в пост ребут
- найти исправления
- .XResources

sxhkd &
udiskie &
aw-server &
yubiswitch off &
greenclip daemon &
deadd-notification-center &
emacs --daemon &

xrdb -load .XResources 

exec openbox-session

